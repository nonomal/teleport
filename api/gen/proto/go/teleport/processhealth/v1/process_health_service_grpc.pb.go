// Copyright 2025 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/processhealth/v1/process_health_service.proto

package processhealthv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProcessHealthService_GetProcessHealth_FullMethodName    = "/teleport.processhealth.v1.ProcessHealthService/GetProcessHealth"
	ProcessHealthService_ListProcessHealths_FullMethodName  = "/teleport.processhealth.v1.ProcessHealthService/ListProcessHealths"
	ProcessHealthService_UpsertProcessHealth_FullMethodName = "/teleport.processhealth.v1.ProcessHealthService/UpsertProcessHealth"
)

// ProcessHealthServiceClient is the client API for ProcessHealthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ProcessHealthService is the service for managing ProcessHealth resources.
type ProcessHealthServiceClient interface {
	// CreateProcessHealth creates a new ProcessHealth resource.
	GetProcessHealth(ctx context.Context, in *GetProcessHealthRequest, opts ...grpc.CallOption) (*ProcessHealth, error)
	// ListProcessHealths lists all ProcessHealth resources.
	ListProcessHealths(ctx context.Context, in *ListProcessHealthsRequest, opts ...grpc.CallOption) (*ListProcessHealthsResponse, error)
	// UpsertProcessHealth creates or updates a ProcessHealth resource.
	UpsertProcessHealth(ctx context.Context, in *UpsertProcessHealthRequest, opts ...grpc.CallOption) (*ProcessHealth, error)
}

type processHealthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessHealthServiceClient(cc grpc.ClientConnInterface) ProcessHealthServiceClient {
	return &processHealthServiceClient{cc}
}

func (c *processHealthServiceClient) GetProcessHealth(ctx context.Context, in *GetProcessHealthRequest, opts ...grpc.CallOption) (*ProcessHealth, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessHealth)
	err := c.cc.Invoke(ctx, ProcessHealthService_GetProcessHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processHealthServiceClient) ListProcessHealths(ctx context.Context, in *ListProcessHealthsRequest, opts ...grpc.CallOption) (*ListProcessHealthsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProcessHealthsResponse)
	err := c.cc.Invoke(ctx, ProcessHealthService_ListProcessHealths_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processHealthServiceClient) UpsertProcessHealth(ctx context.Context, in *UpsertProcessHealthRequest, opts ...grpc.CallOption) (*ProcessHealth, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessHealth)
	err := c.cc.Invoke(ctx, ProcessHealthService_UpsertProcessHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcessHealthServiceServer is the server API for ProcessHealthService service.
// All implementations must embed UnimplementedProcessHealthServiceServer
// for forward compatibility.
//
// ProcessHealthService is the service for managing ProcessHealth resources.
type ProcessHealthServiceServer interface {
	// CreateProcessHealth creates a new ProcessHealth resource.
	GetProcessHealth(context.Context, *GetProcessHealthRequest) (*ProcessHealth, error)
	// ListProcessHealths lists all ProcessHealth resources.
	ListProcessHealths(context.Context, *ListProcessHealthsRequest) (*ListProcessHealthsResponse, error)
	// UpsertProcessHealth creates or updates a ProcessHealth resource.
	UpsertProcessHealth(context.Context, *UpsertProcessHealthRequest) (*ProcessHealth, error)
	mustEmbedUnimplementedProcessHealthServiceServer()
}

// UnimplementedProcessHealthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProcessHealthServiceServer struct{}

func (UnimplementedProcessHealthServiceServer) GetProcessHealth(context.Context, *GetProcessHealthRequest) (*ProcessHealth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessHealth not implemented")
}
func (UnimplementedProcessHealthServiceServer) ListProcessHealths(context.Context, *ListProcessHealthsRequest) (*ListProcessHealthsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProcessHealths not implemented")
}
func (UnimplementedProcessHealthServiceServer) UpsertProcessHealth(context.Context, *UpsertProcessHealthRequest) (*ProcessHealth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertProcessHealth not implemented")
}
func (UnimplementedProcessHealthServiceServer) mustEmbedUnimplementedProcessHealthServiceServer() {}
func (UnimplementedProcessHealthServiceServer) testEmbeddedByValue()                              {}

// UnsafeProcessHealthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessHealthServiceServer will
// result in compilation errors.
type UnsafeProcessHealthServiceServer interface {
	mustEmbedUnimplementedProcessHealthServiceServer()
}

func RegisterProcessHealthServiceServer(s grpc.ServiceRegistrar, srv ProcessHealthServiceServer) {
	// If the following call pancis, it indicates UnimplementedProcessHealthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProcessHealthService_ServiceDesc, srv)
}

func _ProcessHealthService_GetProcessHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessHealthServiceServer).GetProcessHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessHealthService_GetProcessHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessHealthServiceServer).GetProcessHealth(ctx, req.(*GetProcessHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessHealthService_ListProcessHealths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProcessHealthsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessHealthServiceServer).ListProcessHealths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessHealthService_ListProcessHealths_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessHealthServiceServer).ListProcessHealths(ctx, req.(*ListProcessHealthsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessHealthService_UpsertProcessHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertProcessHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessHealthServiceServer).UpsertProcessHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessHealthService_UpsertProcessHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessHealthServiceServer).UpsertProcessHealth(ctx, req.(*UpsertProcessHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProcessHealthService_ServiceDesc is the grpc.ServiceDesc for ProcessHealthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProcessHealthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.processhealth.v1.ProcessHealthService",
	HandlerType: (*ProcessHealthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProcessHealth",
			Handler:    _ProcessHealthService_GetProcessHealth_Handler,
		},
		{
			MethodName: "ListProcessHealths",
			Handler:    _ProcessHealthService_ListProcessHealths_Handler,
		},
		{
			MethodName: "UpsertProcessHealth",
			Handler:    _ProcessHealthService_UpsertProcessHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/processhealth/v1/process_health_service.proto",
}
